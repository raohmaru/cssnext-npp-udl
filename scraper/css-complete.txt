::after----In CSS, ::after creates a pseudo-element that is the last child of the selected element. It is often used to add cosmetic content to an element with the content property. It is inline by default.
::backdrop----The ::backdrop CSS pseudo-element is a box rendered immediately below any element rendered in fullscreen mode (and above any lower elements in the stack).
::before----In CSS, ::before creates a pseudo-element that is the first child of the selected element. It is often used to add cosmetic content to an element with the content property.
::cue----The ::cue CSS pseudo-element matches WebVTT cues within a selected element. This can be used to style captions and other cues in media with VTT tracks.
::first-letter----The ::first-letter CSS pseudo-element applies styles to the first letter of the first line of a block-level element, but only when not preceded by other content (such as images or inline tables).
::first-line----The ::first-line CSS pseudo-element applies styles to the first line of a block-level element.
::placeholder----The ::placeholder CSS pseudo-element represents the placeholder text of a form element.
::selection----The ::selection CSS pseudo-element applies styles to the part of a document that has been highlighted by the user (such as clicking and dragging the mouse across text).
::slotted----The ::slotted() CSS pseudo-element represents any element that has been placed into a slot inside an HTML template (see Using templates and slots for more information).
:active----The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user.
:checked----The :checked CSS pseudo-class selector represents any radio (input type=&quot;radio&quot;), checkbox (input type=&quot;checkbox&quot;), or option (option in a select) element that is checked or toggled to an on state.
:default----The :default CSS pseudo-class represents any form element that is the default among a group of related elements.
:dir----The :dir() CSS pseudo-class matches elements based on the directionality of the text contained in them.
:disabled----The :disabled CSS pseudo-class represents any disabled element. An element is disabled if it can't be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has an enabled state, in which it can be activated or accept focus.
:empty----The :empty CSS pseudo-class represents any element that has no children. Children can be either element nodes or text (including whitespace). Comments or processing instructions do not affect whether an element is considered empty.
:enabled----The :enabled CSS pseudo-class represents any enabled element. An element is enabled if it can be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has a disabled state, in which it can't be activated or accept focus.
:first----The :first CSS pseudo-class, used with the  @page at-rule, represents the first page of a printed document.
:first-child----The :first-child CSS pseudo-class represents the first element among a group of sibling elements.
:first-of-type----The :first-of-type CSS pseudo-class represents the first element of its type among a group of sibling elements.
:focus----The :focus CSS pseudo-class represents an element (such as a form input) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's &quot;tab&quot; key.
:fullscreen----The :fullscreen CSS pseudo-class represents an element that's displayed when the browser is in fullscreen mode.
:hover----The :hover CSS pseudo-class matches when the user interacts with an element with a pointing device, but does not necessarily activate it. It is generally triggered when the user hovers over an element with the cursor (mouse pointer).
:in-range----The :in-range CSS pseudo-class represents an input element whose current value is within the range limits specified by the min and max attributes.
:indeterminate----The :indeterminate CSS pseudo-class represents any form element whose state is indeterminate.
:invalid----The :invalid CSS pseudo-class represents any input or other form element whose contents fail to validate.
:lang----The :lang() CSS pseudo-class matches elements based on the language they are determined to be in.
:last-child----The :last-child CSS pseudo-class represents the last element among a group of sibling elements.
:last-of-type----The :last-of-type CSS pseudo-class represents the last element of its type among a group of sibling elements.
:left----The :left CSS pseudo-class, used with the @page at-rule, represents all left-hand pages of a printed document.
:link----The :link CSS pseudo-class represents an element that has not yet been visited. It matches every unvisited a, area, or link element that has an href attribute.
:not----The :not() CSS pseudo-class represents elements that do not match a list of selectors. Since it prevents specific items from being selected, it is known as the negation pseudo-class.
:nth-child----The :nth-child() CSS pseudo-class matches elements based on their position in a group of siblings.
:nth-last-child----The :nth-last-child() CSS pseudo-class matches elements based on their position among a group of siblings, counting from the end.
:nth-last-of-type----The :nth-last-of-type() CSS pseudo-class matches elements of a given type, based on their position among a group of siblings, counting from the end.
:nth-of-type----The :nth-of-type() CSS pseudo-class matches elements of a given type, based on their position among a group of siblings.
:only-child----The :only-child CSS pseudo-class represents an element without any siblings. This is the same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity.
:only-of-type----The :only-of-type CSS pseudo-class represents an element that has no siblings of the same type.
:optional----The :optional CSS pseudo-class represents any input, select, or textarea element that does not have the required attribute set on it.
:out-of-range----The :out-of-range CSS pseudo-class represents an input element whose current value is outside the range limits specified by the min and max attributes.
:read-only----The :read-only CSS pseudo-class represents an element (such as a locked text input) that is not editable by the user.
:read-write----The :read-write CSS pseudo-class represents an element (such as a text input) that is editable by the user.
:required----The :required CSS pseudo-class represents any input, select, or textarea element that has the required attribute set on it.
:right----The :right CSS pseudo-class, used with the @page at-rule, represents all right-hand pages of a printed document.
:root----The :root CSS pseudo-class matches the root element of a tree representing the document. In HTML, :root represents the html element and is identical to the selector html, except that its specificity is higher.
:scope----The :scope CSS pseudo-class represents elements that are a reference point for selectors to match against.
:target----The :target CSS pseudo-class represents a unique element (the target element) with an id matching the URL's fragment.
:valid----The :valid CSS pseudo-class represents any input or other form element whose contents validate successfully. This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly.
:visited----The :visited CSS pseudo-class represents links that the user has already visited. For privacy reasons, the styles that can be modified using this selector are very limited.
@annotation----
@bottom-center----
@character-variant----
@charset----The @charset CSS at-rule specifies the character encoding used in the style sheet. It must be the first element in the style sheet and not be preceded by any character; as it is not a nested statement, it cannot be used inside conditional group at-rules. If several @charset at-rules are defined, only the first one is used, and it cannot be used inside a style attribute on an HTML element or inside the style element where the character set of the HTML page is relevant.
@counter-style----The @counter-style CSS at-rule lets you define counter styles that are not part of the predefined set of styles. A @counter-style rule defines how to convert a counter value into a string representation.
@font-face----The @font-face CSS at-rule specifies a custom font with which to display text; the font can be loaded from either a remote server or the user's own computer.
@font-feature-values----The @font-feature-values CSS at-rule lets you use a common name in the font-variant-alternates property for features activated differently in OpenType. This can help simplify your CSS when using multiple fonts.
@historical-forms----
@import----The @import CSS at-rule is used to import style rules from other style sheets. These rules must precede all other types of rules, except @charset rules; as it is not a nested statement, @import cannot be used inside conditional group at-rules.
@keyframes----The @keyframes CSS at-rule controls the intermediate steps in a CSS animation sequence by defining styles for keyframes (or waypoints) along the animation sequence.
@left-bottom----
@media----The @media CSS at-rule can be used to apply part of a style sheet based on the result of one or more media queries.
@namespace----@namespace is an at-rule that defines XML namespaces to be used in a CSS style sheet. The defined namespaces can be used to restrict the universal, type, and attribute selectors to only select elements within that namespace. The @namespace rule is generally only useful when dealing with documents containing multiple namespaces&mdash;such as HTML5 with inline SVG or MathML, or XML that mixes multiple vocabularies.
@ornaments----
@page----The @page CSS at-rule is used to modify some CSS properties when printing a document. You can't change all CSS properties with @page. You can only change the margins, orphans, widows, and page breaks of the document. Attempts to change any other CSS properties will be ignored.
@right-bottom----
@styleset----
@stylistic----
@supports----The @supports CSS at-rule lets you specify declarations that depend on a browser's support for one or more specific CSS features. This is called a feature query. The rule may be placed at the top level of your code or nested inside any other conditional group at-rule.
@swash----
@top-center----
@viewport----The @viewport CSS at-rule lets you configure the viewport through which the document is viewed. It's primarily used for mobile devices, but is also used by desktop browsers that support features like &quot;snap to edge&quot; (such as Microsoft Edge).
additive-symbols----The additive-symbols descriptor lets you specify symbols when the value of a counter system descriptor is additive. The additive-symbols descriptor defines additive tuples, each of which is a pair containing a symbol and a non-negative integer weight. The additive system is used to construct sign-value numbering systems such as Roman numerals.
align-content----The CSS align-content property defines how the browser distributes space between and around content items along the cross-axis of their container, which is serving as a flexbox container.
align-items----The CSS align-items property sets the align-self value on all direct children as a group. The align-self property sets the alignment of an item within its containing block.
align-self----The align-self CSS property aligns flex items of the current flex line overriding the align-items value. If any of the item's cross-axis margin is set to auto, then align-self is ignored.
all----The all CSS shorthand property sets all of an element's properties (other than unicode-bidi and direction) to their initial or inherited values, or to the values specified in another stylesheet origin.
animation----The animation CSS property is a shorthand property for the various animation properties: animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, and animation-play-state.
animation-delay----The animation-delay CSS property specifies when an animation should start. You can begin the animation at a future point in time, immediately and from its beginning, or immediately and partway through the animation cycle.
animation-direction----The animation-direction CSS property specifies whether an animation should play forwards, backwards, or alternating back and forth.
animation-duration----The animation-duration CSS property specifies the length of time that an animation should take to complete one cycle.
animation-fill-mode----The animation-fill-mode CSS property specifies how a CSS animation should apply styles to its target before and after its execution.
animation-iteration-count----The animation-iteration-count CSS property sets the number of times an animation cycle should be played before stopping.
animation-name----The animation-name CSS property specifies one or more animations that should be applied to an element. Each name indicates an @keyframes at-rule that defines the property values for the animation sequence.
animation-play-state----The animation-play-state CSS property sets whether an animation is running or paused.
animation-timing-function----The animation-timing-function CSS property specifies how a CSS animation should progress over the duration of each cycle.
annotation()----
attr()----The attr() CSS function is used to retrieve the value of an attribute of the selected element and use it in the style sheet. It can also be used on pseudo-elements, in which case the value of the attribute on the pseudo-element's originating element is returned.
backface-visibility----The backface-visibility CSS property determines whether the back face of an element is visible when turned towards the user.
background----The background CSS property is a short way to declare all background style options at once, including color, image, origin and size, repeat method, and other features.
background-attachment----If a background-image is specified, the background-attachment CSS property determines whether that image's position is fixed within the viewport, or scrolls along with its containing block.
background-blend-mode----The background-blend-mode CSS property sets how an element's background images should blend with each other and with the element's background color.
background-clip----The background-clip CSS property specifies if an element's background, whether a color or an image, extends underneath its border.
background-color----The background-color CSS property sets the background color of an element.
background-image----The background-image CSS property sets one or more background images on an element.
background-origin----The background-origin CSS property sets the background positioning area. In other words, it sets the origin position of an image set with the background-image property.
background-position----The background-position CSS property sets the initial position, relative to the background position layer defined by background-origin, for each defined background image.
background-repeat----The background-repeat CSS property defines how background images are repeated. A background image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.
background-size----The background-size CSS property specifies the size of the element's background image. The image can be left to its natural size, stretched to a new size, or constrained to fit the available space while preserving its intrinsic proportions.
block-size----The block-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode.
blur()----The blur() CSS function applies a Gaussian blur to the input image. Its result is a filter-function.
border----The border CSS property is a shorthand for setting all individual border property values in a single declaration: border-width, border-style, and border-color.
border-block-end----The border-block-end CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.
border-block-end-color----The border-block-end-color CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.
border-block-end-style----The border-block-end-style CSS property defines the style of the logical block end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.
border-block-end-width----The border-block-end-width CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.
border-block-start----The border-block-start CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.
border-block-start-color----The border-block-start-color CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.
border-block-start-style----The border-block-start-style CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.
border-block-start-width----The border-block-start-width CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.
border-bottom----The border-bottom CSS property is a shorthand that sets the values of border-bottom-width, border-bottom-style and border-bottom-color. These properties describe an element's bottom border.
border-bottom-color----The border-bottom-color CSS property sets the color of an element's bottom border. The color can also be set with the shorthand CSS properties border-color or border-bottom.
border-bottom-left-radius----The border-bottom-left-radius CSS property sets the rounding of the bottom-left corner of the element.
border-bottom-right-radius----The border-bottom-right-radius CSS property sets the rounding of the bottom-right corner of the element.
border-bottom-style----The border-bottom-style CSS property sets the line style of an element's bottom border.
border-bottom-width----The border-bottom-width CSS property sets the width of the bottom border of a box.
border-collapse----The border-collapse CSS property specifies whether cells inside a table have shared or separate borders.
border-color----The border-color CSS property is a shorthand property for setting the colors on all four sides of an element's border.
border-image----The border-image CSS property lets you draw an image in place of an element's border-style.
border-image-outset----The border-image-outset CSS property sets the distance by which an element's border image is set out from its border box.
border-image-repeat----The border-image-repeat CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's border image.
border-image-slice----The border-image-slice CSS property divides the image specified by border-image-source into regions. These regions are used to form the components of an element's border image.
border-image-source----The border-image-source CSS property specifies the source image used to create an element's border image.
border-image-width----The border-image-width CSS property specifies the width of an element's border image.
border-inline-end----The border-inline-end CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.
border-inline-end-color----The border-inline-end-color CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.
border-inline-end-style----The border-inline-end-style CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.
border-inline-end-width----The border-inline-end-width CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.
border-inline-start----The border-inline-start CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.
border-inline-start-color----The border-inline-start-color CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color, border-right-color, border-bottom-color, or border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.
border-inline-start-style----The border-inline-start-style CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style, border-right-style, border-bottom-style, or border-left-style property depending on the values defined for writing-mode, direction, and text-orientation.
border-inline-start-width----The border-inline-start-width CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width, border-right-width, border-bottom-width, or border-left-width property depending on the values defined for writing-mode, direction, and text-orientation.
border-left----The border-left CSS property is a shorthand that sets the values of border-left-width, border-left-style, and border-left-color. These properties describe an element's left border.
border-left-color----The border-left-color CSS property sets the color of an element's left border. Note that in many cases the shorthand CSS properties border-color or border-left are more convenient and preferable.
border-left-style----The border-left-style CSS property sets the line style of an element's left border.
border-left-width----The border-top-width CSS property sets the width of the top border of a box.
border-radius----The border-radius CSS property lets you round the corners of an element's outer border edge. You can specify a single radius to make circular corners, or two radii to make elliptical corners.
border-right----The border-right CSS property is a shorthand that sets the values of border-right-width, border-right-style, and border-right-color. These properties describe an element's right border.
border-right-color----The border-right-color CSS property sets the color of an element's right border. Note that in many cases the shorthand CSS properties  border-color or border-right are more convenient and preferable.
border-right-style----The border-right-style CSS property sets the line style of an element's right border.
border-right-width----The border-right-width CSS property sets the width of the right border of a box.
border-spacing----The border-spacing CSS property specifies the distance between the borders of adjacent table cells. This property applies only when border-collapse is separate.
border-style----The border-style CSS property is a shorthand property that sets the line style for all four sides of an element's border.
border-top----The border-top CSS property is a shorthand that sets the values of border-top-width, border-top-style, and border-top-color. These properties describe an element's top border.
border-top-color----The border-top-color CSS property sets the color of an element's top border. Note that in many cases the shorthand CSS properties border-color or border-top are more convenient and preferable.
border-top-left-radius----The border-top-left-radius CSS property sets the rounding of the top-left corner of the element.
border-top-right-radius----The border-top-right-radius CSS property sets the rounding of the top-right corner of the element.
border-top-style----The border-top-style CSS property sets the line style of an element's top border.
border-top-width----The border-top-width CSS property sets the width of the top border of a box.
border-width----The border-width CSS property is a shorthand property for setting the widths on all four sides of an element's border.
bottom----The bottom CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.
box-decoration-break----The box-decoration-break CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.
box-shadow----The box-shadow CSS property is used to add shadow effects around an element's frame. You can specify multiple effects separated by commas if you wish to do so.
box-sizing----The box-sizing CSS property defines how the user agent should calculate the total width and height of an element.
break-after----The break-after CSS property defines how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.
break-before----The break-before CSS property defines how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.
break-inside----The break-inside CSS property defines how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.
brightness()----The brightness() CSS function applies a linear multiplier to the input image, making it appear brighter or darker. Its result is a filter-function.
calc()----The calc() CSS function lets you perform calculations when specifying CSS property values. It can be used anywhere a length, frequency, angle, time, percentage, number, or integer is allowed.
caption-side----The caption-side CSS property puts the content of a table's caption on the specified side. The values are relative to the writing-mode of the table.
caret-color----The caret-color CSS property sets the color of the insertion caret &mdash; the visible indicator of the point at which the next character typed by the user will be inserted &mdash; within an element such as input or one with the contenteditable attribute set.
ch----
character-variant()----
circle()----
clear----The clear CSS property specifies whether an element can be next to floating elements that precede it or must be moved down (cleared) below them. The clear property applies to both floating and non-floating elements.
clip----The clip CSS property defines what portion of an element is visible. The clip property applies only to absolutely positioned elements, that is elements with position:absolute or position:fixed.
clip-path----The clip-path CSS property creates a clipping region that defines what part of an element should be displayed. More specifically, those portions that are inside the region are shown, while those outside are hidden.
cm----
color----The color CSS property sets the foreground color value of an element's text content and text decorations. It also sets the currentcolor value, which may be used as an indirect value on other properties, and is the default for other color properties, such as border-color.
color-adjust----The color-adjust CSS property gives the web author control over what if anything the user agent may do to optimize the appearance of the element on the output device.
column-count----The column-count CSS property breaks an element's content into the specified number of columns.
column-fill----The column-fill CSS property controls how an element's contents are balanced when broken into columns.
column-gap----The column-gap CSS property sets the size of the gap (gutter) between an element's columns.
column-rule----The column-rule CSS property sets the width, style, and color of the rule (line) drawn between columns in a multi-column layout.
column-rule-color----The column-rule-color CSS property sets the color of the rule (line) drawn between columns in a multi-column layout.
column-rule-style----The column-rule-style CSS property sets the style of the line drawn between columns in a multi-column layout.
column-rule-width----The column-rule-width CSS property sets the width of the rule (line) drawn between columns in a multi-column layout.
column-span----The column-span CSS property makes it possible for an element to span across all columns when its value is set to all.
column-width----The column-width CSS property specifies the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the column-width value.  If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.
columns----The columns CSS property sets the column width and column count of an element.
content----The content CSS property replaces an element with a generated value. Objects inserted using the content property are anonymous replaced elements.
contrast()----The contrast() CSS function adjusts the contrast of the input image. Its result is a filter-function.
counter-increment----The counter-increment CSS property increases or decreases the value of a CSS counter by a given value.
counter-reset----The counter-reset CSS property resets a CSS counter to a given value.
cross-fade()----
cubic-bezier()----
cursor----The cursor CSS property specifies which mouse cursor to display when the mouse pointer is over an element.
deg----
direction----The direction CSS property sets the direction of text, table columns, and horizontal overflow.
display----The display CSS property defines the display type of an element, which consists of the two basic qualities of how an element generates boxes &mdash; the outer display type defining how the box participates in flow layout, and the inner display type defining how the children of the box are laid out.
dpcm----
dpi----
dppx----
drop-shadow()----The drop-shadow() CSS function applies a drop shadow effect to the input image. Its result is a filter-function.
element()----The element() CSS function defines an image value generated from an arbitrary HTML element. This image is live, meaning that if the HTML element is changed, the CSS properties using the resulting value are automatically updated.
ellipse()----
em----
empty-cells----The empty-cells CSS property specifies how the user agent should render borders and backgrounds around table cells that have no visible content.
ex----
fallback----The fallback descriptor can be used to specify a counter style to fall back to if the current counter style cannot create a marker representation for a particular counter value.
filter----The filter CSS property lets you apply graphical effects like blurring or color shifting to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.
fit-content()----The fit-content() CSS function clamps a given size to an available size according to the formula min(maximum size, max(minimum size, argument)).
flex----The flex CSS property specifies how a flex item will grow or shrink so as to fit the space available in its flex container. This is a shorthand property that sets flex-grow, flex-shrink, and flex-basis.
flex-basis----The flex-basis CSS property specifies the initial main size of a flex item. This property determines the size of the content-box unless specified otherwise using box-sizing.
flex-direction----The flex-direction CSS property specifies how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).
flex-flow----The flex-flow CSS property is a shorthand property for flex-direction and flex-wrap individual properties.
flex-grow----The flex-grow CSS property specifies the flex grow factor of a flex item. It specifies how much of the available space in the flex container should be assigned to that item. If all sibling items have the same flex grow factor, then all items will receive the same share of available space, otherwise it is distributed according to the ratio defined by the different flex grow factors.
flex-shrink----The flex-shrink CSS property specifies the flex shrink factor of a flex item. Flex items will shrink to fill the container according to the flex-shrink number, when the default size of flex items is larger than the flex container.
flex-wrap----The CSS flex-wrap property specifies whether flex items are forced into a single line or can be wrapped onto multiple lines. If wrapping is allowed, this property also enables you to control the direction in which lines are stacked.
float----The float CSS property specifies that an element should be placed along the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the web page, though still remaining a part of the flow (in contrast to absolute positioning).
font----The font CSS property is either a shorthand property for setting font-style, font-variant, font-weight, font-size, line-height, and font-family; or a way to set the element's font to a system font, using specific keywords.
font-family----The font-family CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.
font-feature-settings----The font-feature-settings CSS property controls advanced typographic features in OpenType fonts.
font-kerning----The font-kerning CSS property sets the use of the kerning information stored in a font.
font-language-override----The font-language-override CSS property controls the use of language-specific glyphs in a typeface.
font-optical-sizing----The font-optical-sizing CSS property allows developers to control whether browsers render text with slightly differing visual representations to optimize viewing at different sizes, or not. This only works for fonts that have an optical size variation axis.
font-size----The font-size CSS property specifies the size of the font. Setting this property may change the size of other items, too, since it is used to compute the value of em, ex, and various other relative length units.
font-size-adjust----The font-size-adjust CSS property sets how the font size should be chosen based on the height of lowercase rather than capital letters.
font-stretch----The font-stretch CSS property selects a normal, condensed, or expanded face from a font.
font-style----The font-style CSS descriptor allows authors to specify font styles for the fonts specified in the @font-face rule.
font-style----The font-style CSS property specifies whether a font should be styled with a normal, italic, or oblique face from its font-family.
font-synthesis----The font-synthesis CSS property controls which missing typefaces, bold or italic, may be synthesized by the browser.
font-variant----The font-variant CSS property is a shorthand for the longhand properties font-variant-caps, font-variant-numeric, font-variant-alternates, font-variant-ligatures, and font-variant-east-asian. You can also set the CSS Level 2 (Revision 1) values of font-variant, (that is, normal or small-caps), by using the font shorthand.
font-variant-alternates----The font-variant-alternates CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in @font-feature-values.
font-variant-caps----The font-variant-caps CSS property controls the usage of alternate glyphs for capital letters.
font-variant-east-asian----The font-variant-east-asian CSS property controls the usage of alternate glyphs for East Asian scripts, like Japanese and Chinese.
font-variant-ligatures----The font-variant-ligatures CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.
font-variant-numeric----The font-variant-numeric CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.
font-variant-position----The font-variant-position CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.
font-variation-settings----The font-variation-settings CSS descriptor allows authors to specify low-level OpenType or TrueType font variations in the @font-face rule.
font-weight----The font-weight CSS property specifies the weight (or boldness) of the font. The font weights available to you will depend on the font-family you are using. Some fonts are only available in normal and bold.
format()----
fr----
frames()----
gap----The gap CSS property specifies the gaps (gutters) between rows and columns. It is a shorthand for row-gap and column-gap.
grad----
grayscale()----The grayscale() CSS function converts the input image to grayscale. Its result is a filter-function.
grid----The grid CSS property is a shorthand property that sets all of the explicit grid properties (grid-template-rows, grid-template-columns, and grid-template-areas), and all the implicit grid properties (grid-auto-rows, grid-auto-columns, and grid-auto-flow), in a single declaration.
grid-area----The grid-area CSS property is a shorthand property for grid-row-start, grid-column-start, grid-row-end and grid-column-end, specifying a grid item&rsquo;s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.
grid-auto-columns----The grid-auto-columns CSS property specifies the size of an implicitly-created grid column track.
grid-auto-flow----The grid-auto-flow CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.
grid-auto-rows----The grid-auto-rows CSS property specifies the size of an implicitly-created grid row track.
grid-column----The grid-column CSS property is a shorthand property for grid-column-start and grid-column-end specifying a grid item's size and location within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.
grid-column-end----The grid-column-end CSS property specifies a grid item&rsquo;s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.
grid-column-start----The grid-column-start CSS property specifies a grid item&rsquo;s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.
grid-row----The grid-row CSS property is a shorthand property for grid-row-start and grid-row-end specifying a grid item&rsquo;s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.
grid-row-end----The grid-row-end CSS property specifies a grid item&rsquo;s end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.
grid-row-start----The grid-row-start CSS property specifies a grid item&rsquo;s start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.
grid-template----The grid-template CSS property is a shorthand property for defining grid columns, rows, and areas.
grid-template-areas----The grid-template-areas CSS property specifies named grid areas.
grid-template-columns----The grid-template-columns CSS property defines the line names and track sizing functions of the grid columns.
grid-template-rows----The grid-template-rows CSS property defines the line names and track sizing functions of the grid rows.
hanging-punctuation----The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text.
height----The height CSS descriptor is a shorthand descriptor for setting both min-height and max-height of the viewport. by providing one viewport length value will set both, the minimum height and the maximum height, to the value provided.
height----The height CSS property specifies the height of an element. By default, the property defines the height of the content area. If box-sizing is set to border-box, however, it instead determines the height of the border area.
hsl()----
hsla()----
hue-rotate()----The hue-rotate() CSS function rotates the hue of an element and its contents. Its result is a filter-function.
hyphens----The hyphens CSS property specifies how words should be hyphenated when text wraps across multiple lines. You can prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.
Hz----
image()----
image-orientation----The image-orientation CSS property specifies a layout-independent correction to the orientation of an image.
image-rendering----The image-rendering CSS property indicates the algorithm to use when scaling images. When applied to an element, the property applies to the element itself, to any images supplied in its other properties, and to its descendant elements.
image-set()----
in----
inherit----The inherit CSS keyword causes the element for which it is specified to take the computed value of the property from its parent element.
initial----The initial CSS keyword applies the initial (or default) value of a property to an element. It can be applied to any CSS property.
inline-size----The inline-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode.
inset()----
invert()----The invert() CSS function inverts the color samples in the input image. Its result is a filter-function.
isolation----The isolation CSS property determines whether an element must create a new stacking context.
justify-content----The CSS justify-content property defines how the browser distributes space between and around content items along the main-axis of their container.
justify-items----The CSS justify-items property defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis.
justify-self----The CSS justify-self property defines the way of justifying a box inside its alignment container along the appropriate axis.
kHz----
leader()----
left----The left CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.
letter-spacing----The letter-spacing CSS property sets the spacing behavior between text characters.
line-break----The line-break CSS property is used to specify how (or if) to break lines when working with punctuation and symbols. This only affects text in Chinese, Japanese, or Korean (CJK).
line-height----The line-height CSS property sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.
linear-gradient()----The linear-gradient() CSS function creates an image consisting of a progressive transition between two or more colors along a straight line. Its result is an object of the gradient data type, which is a special kind of image.
list-style----The list-style CSS property is a shorthand for setting the individual values that define how a list is displayed: list-style-type, list-style-image, and list-style-position.
list-style-image----The list-style-image CSS property specifies an image to be used as the list item marker. It is often more convenient to use the shorthand list-style.
list-style-position----The list-style-position CSS property specifies the position of the ::marker relative to a list item.
list-style-type----The list-style-type CSS property specifies the appearance of a list item element.
local()----
margin----The margin CSS property sets the margin area on all four sides of an element. It is a shorthand for setting all individual margins at once: margin-top, margin-right, margin-bottom, and margin-left.
margin-block-end----The margin-block-end CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.
margin-block-start----The margin-block-start CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.
margin-bottom----The margin-bottom CSS property sets the margin area on the bottom of an element. A positive value will place it farther than normal from its neighbors, while a negative value will place it closer.
margin-inline-end----The margin-inline-end CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the margin-top, margin-right, margin-bottom or margin-left property depending on the values defined for writing-mode, direction, and text-orientation.
margin-inline-start----The margin-inline-start CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the margin-top, margin-right, margin-bottom, or margin-left property depending on the values defined for writing-mode, direction, and text-orientation.
margin-left----The margin-left CSS property sets the margin area on the left side of an element. A positive value will place it farther than normal from its neighbors, while a negative value will place it closer.
margin-right----The margin-right CSS property sets the margin area on the right side of an element. A positive value will place it farther than normal from its neighbors, while a negative value will place it closer.
margin-top----The margin-top CSS property sets the margin area on the top of an element. A positive value will place it farther than normal from its neighbors, while a negative value will place it closer.
mask----The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points.
mask-clip----The mask-clip CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.
mask-composite----The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it.
mask-image----The mask-image CSS property sets the image that is used as mask layer for an element.
mask-mode----The mask-mode CSS property determines whether the mask reference defined by mask-image is treated as a luminance or alpha mask.
mask-origin----The mask-origin CSS property determines the origin of a mask.
mask-position----The mask-position CSS property sets the initial position, relative to the mask position layer defined by mask-origin, for each defined mask image.
mask-repeat----The mask-repeat CSS property defines how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.
mask-size----The mask-size CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.
mask-type----The mask-type CSS property determines whether the mask defined by an SVG mask element is used as a luminance or an alpha mask. It applies to the mask element itself.
matrix()----The matrix() CSS function defines a homogeneous 2D transformation matrix. Its result is a transform-function data type.
matrix3d()----The matrix3d() CSS function defines a 3D transformation as a 4x4 homogeneous matrix. Its result is a transform-function data type.
max-height----The max-height CSS descriptor specifies the maximum height of the viewport of a document defined via the @viewport at-rule.
max-height----The max-height CSS property sets the maximum height of an element. It prevents the used value of the height property from becoming larger than the value specified for max-height.
max-width----The max-width CSS descriptor specifies the maximum width of the viewport of a document defined via the @viewport at-rule.
max-width----The max-width CSS property sets the maximum width of an element. It prevents the used value of the width property from becoming larger than the value specified by max-width.
max-zoom----The max-zoom CSS descriptor sets the maximum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom in any further than this, whether automatically or at the user's request.
min-block-size----The min-block-size CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode.
min-height----The min-height CSS descriptor specifies the minimum height of the viewport of a document defined via the @viewport at-rule.
min-height----The min-height CSS property sets the minimum height of an element. It prevents the used value of the height property from becoming smaller than the value specified for min-height.
min-inline-size----The min-inline-size CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the min-width or the min-height property, depending on the value of writing-mode.
min-width----The min-width CSS descriptor specifies the minimum width of the viewport of a document defined via @viewport.
min-width----The min-width CSS property sets the minimum width of an element. It prevents the used value of the width property from becoming smaller than the value specified for min-width.
min-zoom----The min-zoom CSS descriptor sets the minimum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom out any further than this, whether automatically or at the user's request.
minmax()----The minmax() CSS function defines a size range greater than or equal to min and less than or equal to max. It is used with CSS Grids.
mix-blend-mode----The mix-blend-mode CSS property describes how an element's content should blend with the content of the element's direct parent and the element's background.
mm----
ms----
negative----When defining custom counter styles, the negative descriptor lets you alter the representations of negative counter values, by providing a way to specify symbols to be appended or prepended to the counter representation when the value is negative.
object-fit----The object-fit CSS property specifies how the contents of a replaced element, such as an img or video, should be resized to fit its container.
object-position----The object-position CSS property specifies the alignment of the selected replaced element's contents within the element's box.
offset-block-end----
offset-block-start----
offset-inline-end----
offset-inline-start----
opacity----The opacity CSS property specifies the level of transparency of an element, that is, the degree to which the content behind the element is visible.
opacity()----The opacity() CSS function applies transparency to the samples in the input image. Its result is a filter-function.
order----The order CSS property specifies the order used to lay out a flex or grid item in its flex or grid container. Items within the same container are laid out in ascending order according to their order values. Elements with the same order value are laid out in the order in which they appear in the source code.
orientation----The orientation CSS descriptor controls the orientation of a document defined by @viewport.
ornaments()----
orphans----The orphans CSS property specifies the minimum number of lines in a block container that must be shown at the bottom of a page, region, or column. This property is normally used to control how breaks occur.
outline----The outline CSS property is a shorthand to set various outline properties in a single declaration: outline-style, outline-width, and outline-color.
outline-color----The outline-color CSS property sets the color of an element's outline.
outline-offset----The outline-offset CSS property sets the amount of space between an outline and the edge or border of an element.
outline-style----The outline-style CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the border.
outline-width----The outline-width CSS property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the border.
overflow----The overflow CSS property sets what to do when an element's content is too big to fit in its block formatting context. It is a shorthand for overflow-x and overflow-y.
overflow-wrap----The overflow-wrap CSS property specifies whether or not the browser should insert line breaks within words to prevent text from overflowing its content box.
overflow-x----The overflow-x CSS property specifies whether to clip content, render a scroll bar, or display overflow content of a block-level element, when it overflows at the left and right edges.
overflow-y----The overflow-y CSS property specifies whether to clip content, render a scroll bar, or display overflow content of a block-level element, when it overflows at the top and bottom edges.
pad----The pad descriptor can be used with custom counter style definitions when you need the marker representations to have a minimum length. If a marker representation is smaller than the specified pad length, then the marker will be padded with the specified pad symbol. Marker representations longer than the pad length are constructed as normal.
padding----The padding CSS property sets the padding area on all four sides of an element. It is a shorthand for setting all individual paddings at once: padding-top, padding-right, padding-bottom, and padding-left.
padding-block-end----The padding-block-end CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the padding-top, padding-right, padding-bottom, or padding-left property depending on the values defined for writing-mode, direction, and text-orientation.
padding-block-start----The padding-block-start CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the padding-top, padding-right, padding-bottom, or padding-left property depending on the values defined for writing-mode, direction, and text-orientation.
padding-bottom----The padding-bottom CSS property sets the height of the padding area on the bottom of an element.
padding-inline-end----The padding-inline-end CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the padding-top, padding-right, padding-bottom, or padding-left property depending on the values defined for writing-mode, direction, and text-orientation.
padding-inline-start----The padding-inline-start CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. It corresponds to the padding-top, padding-right, padding-bottom, or padding-left property depending on the values defined for writing-mode, direction, and text-orientation.
padding-left----The padding-left CSS property sets the width of the padding area on the left side of an element.
padding-right----The padding-right CSS property sets the width of the padding area on the right side of an element.
padding-top----The padding-top CSS property sets the height of the padding area on the top of an element.
page-break-after----The page-break-after CSS property adjusts page breaks after the current element.
page-break-before----The page-break-before CSS property adjusts page breaks before the current element.
page-break-inside----The page-break-inside CSS property adjusts page breaks inside the current element.
pc----
perspective----The perspective CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with z0 becomes larger; each 3D-element with z0 becomes smaller. The strength of the effect is determined by the value of this property.
perspective()----The perspective() CSS function defines a transformation that sets the distance between the user and the z=0 plane. Its result is a transform-function data type.
perspective-origin----The perspective-origin CSS property determines the position at which the viewer is looking. It is used as the vanishing point by the perspective property.
place-content----The place-content CSS shorthand property sets both the align-content and justify-content properties.
pointer-events----The pointer-events CSS property specifies under what circumstances (if any) a particular graphic element can become the target of mouse events.
polygon()----
position----The position CSS property specifies how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.
prefix----The prefix descriptor of the @counter-style rule specifies content that will be prepended to the marker representation. If not specified, the default value will be &quot;&quot; (an empty string).
pt----
px----
Q----
quotes----The quotes CSS property sets how quotation marks appear.
rad----
radial-gradient()----The radial-gradient() CSS function creates an image consisting of a progressive transition between two or more colors that radiate from an origin. Its shape may be a circle or an ellipse. The function's result is an object of the gradient data type, which is a special kind of image.
range----When defining custom counter styles, the range descriptor lets the author specify a range of counter values over which the style is applied. If a counter value is outside the specified range, then the fallback style will be used to construct the representation of that marker.
rect()----
rem----
repeat()----The repeat() CSS function represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form.
repeating-linear-gradient()----The repeating-linear-gradient() CSS function creates an image consisting of repeating linear gradients. It is similar to linear-gradient() and takes the same arguments, but it repeats the color stops infinitely in all directions so as to cover its entire container. The function's result is an object of the gradient data type, which is a special kind of image.
repeating-radial-gradient()----The repeating-radial-gradient() CSS function creates an image consisting of repeating gradients that radiate from an origin. It is similar to radial-gradient() and takes the same arguments, but it repeats the color stops infinitely in all directions so as to cover its entire container. The function's result is an object of the gradient data type, which is a special kind of image.
resize----The resize CSS property sets whether an element is resizable, and if so, in which direction(s).
revert----The revert CSS keyword rolls back the cascade so that a property takes on the value it would have had if there were no styles in the current style origin (author, user, or user-agent).
rgb()----
rgba()----
right----The right CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.
rotate----The rotate CSS property allows you to specify rotation transforms individually and independantly of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.
rotate()----The rotate() CSS function defines a transformation that rotates an element around a fixed point on the 2D plane, without deforming it. Its result is a transform-function data type.
rotate3d()----The rotate3d() CSS function defines a transformation that rotates an element around a fixed axis in 3D space, without deforming it. Its result is a transform-function data type.
rotateX()----The rotateX() CSS function defines a transformation that rotates an element around the abscissa (horizontal axis) without deforming it. Its result is a transform-function data type.
rotateY()----The rotateY() CSS function defines a transformation that rotates an element around the ordinate (vertical axis) without deforming it. Its result is a transform-function data type.
rotateZ()----The rotateZ() CSS function defines a transformation that rotates an element around the z-axis without deforming it. Its result is a transform-function data type.
row-gap----The row-gap CSS property sets the size of the gap (gutter) between an element's rows.
s----
saturate()----The saturate() CSS function super-saturates or desaturates the input image. Its result is a filter-function.
scale----The scale CSS property allows you to specify scale transforms individually and independantly of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.
scale()----The scale() CSS function defines a transformation that resizes an element on the 2D plane. Because the amount of scaling is defined by a vector, it can resize the horizontal and vertical dimensions at different scales. Its result is a transform-function data type.
scale3d()----The scale3d() CSS function defines a transformation that resizes an element in 3D space. Because the amount of scaling is defined by a vector, it can resize different dimensions at different scales. Its result is a transform-function data type.
scaleX()----The scaleX() CSS function defines a transformation that resizes an element along the x-axis (horizontally). Its result is a transform-function data type.
scaleY()----The scaleY() CSS function defines a transformation that resizes an element along the y-axis (vertically). Its result is a transform-function data type.
scaleZ()----The scaleZ() CSS function defines a transformation that resizes an element along the z-axis. Its result is a transform-function data type.
scroll-behavior----The scroll-behavior CSS property specifies the scrolling behavior for a scrolling box when scrolling is triggered by one of the navigation or CSSOM scrolling APIs.
scroll-snap-type----The scroll-snap-type CSS property defines how strictly snap points are enforced on the scroll container in case there is one.
sepia()----The sepia() CSS function converts the input image to sepia, giving it a warmer, more yellow/brown appearance. Its result is a filter-function.
shape-image-threshold----The shape-image-threshold CSS property defines the alpha channel threshold used to extract the shape using an image as the value for shape-outside.
shape-margin----The shape-margin CSS property specifies a margin for a CSS shape created using shape-outside.
shape-outside----The shape-outside CSS property defines a shape&mdash;which may be non-rectangular&mdash;around which adjacent inline content should wrap
skew()----The skew() CSS function defines a transformation that skews an element on the 2D plane. Its result is a transform-function data type.
skewX()----The skewX() CSS function defines a transformation that skews an element in the horizontal direction on the 2D plane. Its result is a transform-function data type.
skewY()----The skewY() CSS function defines a transformation that skews an element in the vertical direction on the 2D plane. Its result is a transform-function data type.
speak-as----The speak-as descriptor specifies how a counter symbol constructed with a given @counter-style will be represented in the spoken form. For example, an author can specify a counter symbol to be either spoken as its numerical value or just represented with an audio cue.
src----The src CSS descriptor of the @font-face rule specifies the resource containing font data. It is required for the @font-face rule to be valid.
steps()----
styleset()----
stylistic()----
suffix----The suffix descriptor of the @counter-style rule specifies content that will be appended to the marker representation. If not specified, the default value will be &quot;\2E\20&quot; (&quot;. &quot;, a full stop followed by a space).
swash()----
symbols----The symbols CSS descriptor is used to specify the symbols that the specified counter system will use to construct counter representations. A symbol can be a string, image, or identifier. It is used within the @counter-style at-rule.
symbols()----The symbols() CSS function lets you define counter styles inline, directly as the value of a property such as list-style. Unlike @counter-style, symbols() is anonymous (i.e., it can only be used once). Although less powerful, it is shorter and easier to write than @counter-style.
system----The system descriptor specifies the algorithm to be used for converting the integer value of a counter to a string representation. It is used in a @counter-style to define the behavior of the defined style.
tab-size----The tab-size CSS property is used to customize the width of a tab (U+0009) character.
table-layout----The table-layout CSS property specifies the algorithm used to lay out table cells, rows, and columns.
target-counter()----
target-counters()----
target-text()----
text-align----The text-align CSS property specifies the horizontal alignment of an inline or table-cell box.This means it works like vertical-align but in the horizontal direction.
text-align-last----The text-align-last CSS property describes how the last line of a block or a line, right before a forced line break, is aligned.
text-combine-upright----The text-combine-upright CSS property specifies the combination of multiple characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.
text-decoration----The text-decoration CSS property sets the appearance of decorative lines on text. It is a shorthand for text-decoration-line, text-decoration-color, and text-decoration-style.
text-decoration-color----The text-decoration-color CSS property sets the color of the decorative additions to text that are specified by text-decoration-line; these include underlines and overlines, strikethroughs, and wavy lines like those typically used to indicate content is misspelled (for example). The specified color applies to all such decorative lines in the scope of the property's value.
text-decoration-line----The text-decoration-line CSS property sets the kind of decoration that is used on text in an element.
text-decoration-style----The text-decoration-style CSS property sets the style of the lines specified by text-decoration-line. The style applies to all lines that are specified; there is no way to define different styles for each of the lines defined by text-decoration-line.
text-emphasis----The text-emphasis CSS property is a shorthand property for setting text-emphasis-style and text-emphasis-color in one declaration. This property will apply the specified emphasis mark to each character of the element's text, except separator characters, like spaces,  and control characters.
text-emphasis-color----The text-emphasis-color CSS property defines the color used to draw emphasis marks on text being rendered in the HTML document. This value can also be set and reset using the text-emphasis shorthand.
text-emphasis-position----The text-emphasis-position CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.
text-emphasis-style----The text-emphasis-style CSS property defines the type of emphasis used. It can also be set, and reset, using the text-emphasis shorthand.
text-indent----The text-indent CSS property specifies the amount of indentation (empty space) that is put before lines of text in a block. By default, this controls the indentation of only the first formatted line of the block, but the hanging and each-line keywords can be used to change this behavior.
text-justify----The text-justify CSS property defines what type of justification should be applied to text when it is justified (i.e., when text-align: justify; is set on it).
text-orientation----The text-orientation CSS property defines the orientation of the text characters in a line. This property only has an effect in vertical mode, that is, when writing-mode is not horizontal-tb. It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.
text-overflow----The text-overflow CSS property determines how overflowed content that is not displayed is signaled to users. It can be clipped, display an ellipsis ('&hellip;', U+2026 Horizontal Ellipsis), or display a custom string.
text-rendering----The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text.
text-shadow----The text-shadow CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its decorations.
text-transform----The text-transform CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
text-underline-position----The text-underline-position CSS property specifies the position of the underline which is set using the text-decoration property's underline value.
top----The top CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.
touch-action----The touch-action CSS property sets how a region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).
transform----The transform CSS property lets you rotate, scale, skew, or translate a given element. This is achieved by modifying the coordinate space of the CSS visual formatting model.
transform-box----The transform-box CSS property defines the layout box to which the transform and transform-origin properties relate.
transform-origin----The transform-origin CSS property sets the origin for an element's transformations.
transform-style----The transform-style CSS property determines if the children of an element are positioned in the 3D-space or are flattened in the plane of the element.
transition----The transition CSS property is a shorthand property for transition-property, transition-duration, transition-timing-function, and transition-delay.
transition-delay----The transition-delay CSS property specifies the amount of time to wait before starting a property's transition effect when its value changes.
transition-duration----The transition-duration CSS property specifies the number of seconds or milliseconds a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur.
transition-property----The transition-property CSS property specifies the CSS properties to which a transition effect should be applied.
transition-timing-function----The transition-timing-function CSS property is used to describe how the intermediate values of the CSS properties being affected by a transition effect are calculated.
translate----The translate CSS property allows you to specify translation transforms individually and independantly of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.
translate()----The translate() CSS function repositions an element in the horizontal and/or vertical directions. Its result is a transform-function data type.
translate3d()----The translate3d() CSS function repositions an element in 3D space. Its result is a transform-function data type.
translateX()----The translateX() CSS function repositions an element horizontally on the 2D plane. Its result is a transform-function data type.
translateY()----The translateY() CSS function repositions an element vertically on the 2D plane. Its result is a transform-function data type.
translateZ()----The translateZ() CSS function repositions an element along the z-axis in 3D space, i.e., closer to or farther away from the viewer. Its result is a transform-function data type.
turn----
unicode-bidi----The unicode-bidi CSS property, together with the direction property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The unicode-bidi property overrides this algorithm and allows the developer to control the text embedding.
unicode-range----The unicode-range CSS descriptor sets the specific range of characters to be used from a font defined by @font-face and made available for use on the current page. If the page doesn't use any character in this range, the font is not downloaded; if it uses at least one, the whole font is downloaded.
unset----The unset CSS keyword resets a property to its inherited value if it inherits from its parent, and to its initial value if not.
url()----
user-zoom----The user-zoom CSS descriptor controls whether or not the user can change the zoom factor of a document defined by @viewport.
var()----The var() CSS function can be used to insert the value of a custom property (sometimes called a &quot;CSS variable&quot;) instead of any part of a value of another property.
vertical-align----The vertical-align CSS property specifies the vertical alignment of an inline or table-cell box.
vh----
visibility----The visibility CSS property can show or hide an element without affecting the layout of a document (i.e., space is created for elements regardless of whether they are visible or not). The property can also hide rows or columns in a table.
vmax----
vmin----
vw----
white-space----The white-space CSS property determines how white space inside an element is handled.
widows----The widows CSS property specifies the minimum number of lines in a block container that must be shown at the top of a page, region, or column. This property is normally used to control how breaks occur.
width----The width CSS descriptor is shorthand for setting both the min-width and the max-width of the viewport. By providing one viewport length value, that value will determine both the min-width and the max-width to the value provided.
width----The width CSS property specifies the width of an element. By default, the property defines the width of the content area. If box-sizing is set to border-box, however, it instead determines the width of the border area.
will-change----The will-change CSS property provides a way for authors to hint browsers about the kind of changes to be expected on an element, so that the browser can set up appropriate optimizations ahead of time before the element is actually changed.
word-break----The word-break CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.
word-spacing----The word-spacing CSS property specifies the spacing behavior between tags and words.
word-wrap----
writing-mode----The writing-mode CSS property defines whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress.
x----
z-index----The z-index CSS property specifies the z-order of a positioned element and its descendants or flex items (children of an element with display: flex). When elements overlap, z-order determines which one covers the other. An element with a larger z-index generally covers an element with a lower one.
zoom----The zoom CSS descriptor sets the initial zoom factor of a document defined by the @viewport at-rule.